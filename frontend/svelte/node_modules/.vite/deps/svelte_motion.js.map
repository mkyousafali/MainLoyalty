{
  "version": 3,
  "sources": ["../../svelte/src/motion/utils.js", "../../svelte/src/motion/spring.js", "../../svelte/src/motion/tweened.js", "../../svelte/src/motion/index.js"],
  "sourcesContent": ["/**\r\n * @param {any} obj\r\n * @returns {obj is Date}\r\n */\r\nexport function is_date(obj) {\r\n\treturn Object.prototype.toString.call(obj) === '[object Date]';\r\n}\r\n", "/** @import { Task } from '#client' */\r\n/** @import { SpringOpts, SpringUpdateOpts, TickContext } from './private.js' */\r\n/** @import { Spring as SpringStore } from './public.js' */\r\nimport { writable } from '../store/shared/index.js';\r\nimport { loop } from '../internal/client/loop.js';\r\nimport { raf } from '../internal/client/timing.js';\r\nimport { is_date } from './utils.js';\r\nimport { set, state } from '../internal/client/reactivity/sources.js';\r\nimport { render_effect } from '../internal/client/reactivity/effects.js';\r\nimport { tag } from '../internal/client/dev/tracing.js';\r\nimport { get } from '../internal/client/runtime.js';\r\nimport { deferred, noop } from '../internal/shared/utils.js';\r\nimport { DEV } from 'esm-env';\r\n\r\n/**\r\n * @template T\r\n * @param {TickContext} ctx\r\n * @param {T} last_value\r\n * @param {T} current_value\r\n * @param {T} target_value\r\n * @returns {T}\r\n */\r\nfunction tick_spring(ctx, last_value, current_value, target_value) {\r\n\tif (typeof current_value === 'number' || is_date(current_value)) {\r\n\t\t// @ts-ignore\r\n\t\tconst delta = target_value - current_value;\r\n\t\t// @ts-ignore\r\n\t\tconst velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0\r\n\t\tconst spring = ctx.opts.stiffness * delta;\r\n\t\tconst damper = ctx.opts.damping * velocity;\r\n\t\tconst acceleration = (spring - damper) * ctx.inv_mass;\r\n\t\tconst d = (velocity + acceleration) * ctx.dt;\r\n\t\tif (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {\r\n\t\t\treturn target_value; // settled\r\n\t\t} else {\r\n\t\t\tctx.settled = false; // signal loop to keep ticking\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn is_date(current_value) ? new Date(current_value.getTime() + d) : current_value + d;\r\n\t\t}\r\n\t} else if (Array.isArray(current_value)) {\r\n\t\t// @ts-ignore\r\n\t\treturn current_value.map((_, i) =>\r\n\t\t\t// @ts-ignore\r\n\t\t\ttick_spring(ctx, last_value[i], current_value[i], target_value[i])\r\n\t\t);\r\n\t} else if (typeof current_value === 'object') {\r\n\t\tconst next_value = {};\r\n\t\tfor (const k in current_value) {\r\n\t\t\t// @ts-ignore\r\n\t\t\tnext_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\treturn next_value;\r\n\t} else {\r\n\t\tthrow new Error(`Cannot spring ${typeof current_value} values`);\r\n\t}\r\n}\r\n\r\n/**\r\n * The spring function in Svelte creates a store whose value is animated, with a motion that simulates the behavior of a spring. This means when the value changes, instead of transitioning at a steady rate, it \"bounces\" like a spring would, depending on the physics parameters provided. This adds a level of realism to the transitions and can enhance the user experience.\r\n *\r\n * @deprecated Use [`Spring`](https://svelte.dev/docs/svelte/svelte-motion#Spring) instead\r\n * @template [T=any]\r\n * @param {T} [value]\r\n * @param {SpringOpts} [opts]\r\n * @returns {SpringStore<T>}\r\n */\r\nexport function spring(value, opts = {}) {\r\n\tconst store = writable(value);\r\n\tconst { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;\r\n\t/** @type {number} */\r\n\tlet last_time;\r\n\t/** @type {Task | null} */\r\n\tlet task;\r\n\t/** @type {object} */\r\n\tlet current_token;\r\n\r\n\tlet last_value = /** @type {T} */ (value);\r\n\tlet target_value = /** @type {T | undefined} */ (value);\r\n\r\n\tlet inv_mass = 1;\r\n\tlet inv_mass_recovery_rate = 0;\r\n\tlet cancel_task = false;\r\n\t/**\r\n\t * @param {T} new_value\r\n\t * @param {SpringUpdateOpts} opts\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tfunction set(new_value, opts = {}) {\r\n\t\ttarget_value = new_value;\r\n\t\tconst token = (current_token = {});\r\n\t\tif (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {\r\n\t\t\tcancel_task = true; // cancel any running animation\r\n\t\t\tlast_time = raf.now();\r\n\t\t\tlast_value = new_value;\r\n\t\t\tstore.set((value = target_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t} else if (opts.soft) {\r\n\t\t\tconst rate = opts.soft === true ? 0.5 : +opts.soft;\r\n\t\t\tinv_mass_recovery_rate = 1 / (rate * 60);\r\n\t\t\tinv_mass = 0; // infinite mass, unaffected by spring forces\r\n\t\t}\r\n\t\tif (!task) {\r\n\t\t\tlast_time = raf.now();\r\n\t\t\tcancel_task = false;\r\n\t\t\ttask = loop((now) => {\r\n\t\t\t\tif (cancel_task) {\r\n\t\t\t\t\tcancel_task = false;\r\n\t\t\t\t\ttask = null;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tinv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);\r\n\r\n\t\t\t\t// clamp elapsed time to 1/30th of a second, so that longer pauses\r\n\t\t\t\t// (blocked thread or inactive tab) don't cause the spring to go haywire\r\n\t\t\t\tconst elapsed = Math.min(now - last_time, 1000 / 30);\r\n\r\n\t\t\t\t/** @type {TickContext} */\r\n\t\t\t\tconst ctx = {\r\n\t\t\t\t\tinv_mass,\r\n\t\t\t\t\topts: spring,\r\n\t\t\t\t\tsettled: true,\r\n\t\t\t\t\tdt: (elapsed * 60) / 1000\r\n\t\t\t\t};\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tconst next_value = tick_spring(ctx, last_value, value, target_value);\r\n\t\t\t\tlast_time = now;\r\n\t\t\t\tlast_value = /** @type {T} */ (value);\r\n\t\t\t\tstore.set((value = /** @type {T} */ (next_value)));\r\n\t\t\t\tif (ctx.settled) {\r\n\t\t\t\t\ttask = null;\r\n\t\t\t\t}\r\n\t\t\t\treturn !ctx.settled;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn new Promise((fulfil) => {\r\n\t\t\t/** @type {Task} */ (task).promise.then(() => {\r\n\t\t\t\tif (token === current_token) fulfil();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t/** @type {SpringStore<T>} */\r\n\t// @ts-expect-error - class-only properties are missing\r\n\tconst spring = {\r\n\t\tset,\r\n\t\tupdate: (fn, opts) => set(fn(/** @type {T} */ (target_value), /** @type {T} */ (value)), opts),\r\n\t\tsubscribe: store.subscribe,\r\n\t\tstiffness,\r\n\t\tdamping,\r\n\t\tprecision\r\n\t};\r\n\treturn spring;\r\n}\r\n\r\n/**\r\n * A wrapper for a value that behaves in a spring-like fashion. Changes to `spring.target` will cause `spring.current` to\r\n * move towards it over time, taking account of the `spring.stiffness` and `spring.damping` parameters.\r\n *\r\n * ```svelte\r\n * <script>\r\n * \timport { Spring } from 'svelte/motion';\r\n *\r\n * \tconst spring = new Spring(0);\r\n * </script>\r\n *\r\n * <input type=\"range\" bind:value={spring.target} />\r\n * <input type=\"range\" bind:value={spring.current} disabled />\r\n * ```\r\n * @template T\r\n * @since 5.8.0\r\n */\r\nexport class Spring {\r\n\t#stiffness = state(0.15);\r\n\t#damping = state(0.8);\r\n\t#precision = state(0.01);\r\n\r\n\t#current;\r\n\t#target;\r\n\r\n\t#last_value = /** @type {T} */ (undefined);\r\n\t#last_time = 0;\r\n\r\n\t#inverse_mass = 1;\r\n\t#momentum = 0;\r\n\r\n\t/** @type {import('../internal/client/types').Task | null} */\r\n\t#task = null;\r\n\r\n\t/** @type {ReturnType<typeof deferred> | null} */\r\n\t#deferred = null;\r\n\r\n\t/**\r\n\t * @param {T} value\r\n\t * @param {SpringOpts} [options]\r\n\t */\r\n\tconstructor(value, options = {}) {\r\n\t\tthis.#current = DEV ? tag(state(value), 'Spring.current') : state(value);\r\n\t\tthis.#target = DEV ? tag(state(value), 'Spring.target') : state(value);\r\n\r\n\t\tif (typeof options.stiffness === 'number') this.#stiffness.v = clamp(options.stiffness, 0, 1);\r\n\t\tif (typeof options.damping === 'number') this.#damping.v = clamp(options.damping, 0, 1);\r\n\t\tif (typeof options.precision === 'number') this.#precision.v = options.precision;\r\n\r\n\t\tif (DEV) {\r\n\t\t\ttag(this.#stiffness, 'Spring.stiffness');\r\n\t\t\ttag(this.#damping, 'Spring.damping');\r\n\t\t\ttag(this.#precision, 'Spring.precision');\r\n\t\t\ttag(this.#current, 'Spring.current');\r\n\t\t\ttag(this.#target, 'Spring.target');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a spring whose value is bound to the return value of `fn`. This must be called\r\n\t * inside an effect root (for example, during component initialisation).\r\n\t *\r\n\t * ```svelte\r\n\t * <script>\r\n\t * \timport { Spring } from 'svelte/motion';\r\n\t *\r\n\t * \tlet { number } = $props();\r\n\t *\r\n\t * \tconst spring = Spring.of(() => number);\r\n\t * </script>\r\n\t * ```\r\n\t * @template U\r\n\t * @param {() => U} fn\r\n\t * @param {SpringOpts} [options]\r\n\t */\r\n\tstatic of(fn, options) {\r\n\t\tconst spring = new Spring(fn(), options);\r\n\r\n\t\trender_effect(() => {\r\n\t\t\tspring.set(fn());\r\n\t\t});\r\n\r\n\t\treturn spring;\r\n\t}\r\n\r\n\t/** @param {T} value */\r\n\t#update(value) {\r\n\t\tset(this.#target, value);\r\n\r\n\t\tthis.#current.v ??= value;\r\n\t\tthis.#last_value ??= this.#current.v;\r\n\r\n\t\tif (!this.#task) {\r\n\t\t\tthis.#last_time = raf.now();\r\n\r\n\t\t\tvar inv_mass_recovery_rate = 1000 / (this.#momentum * 60);\r\n\r\n\t\t\tthis.#task ??= loop((now) => {\r\n\t\t\t\tthis.#inverse_mass = Math.min(this.#inverse_mass + inv_mass_recovery_rate, 1);\r\n\r\n\t\t\t\t// clamp elapsed time to 1/30th of a second, so that longer pauses\r\n\t\t\t\t// (blocked thread or inactive tab) don't cause the spring to go haywire\r\n\t\t\t\tconst elapsed = Math.min(now - this.#last_time, 1000 / 30);\r\n\r\n\t\t\t\t/** @type {import('./private').TickContext} */\r\n\t\t\t\tconst ctx = {\r\n\t\t\t\t\tinv_mass: this.#inverse_mass,\r\n\t\t\t\t\topts: {\r\n\t\t\t\t\t\tstiffness: this.#stiffness.v,\r\n\t\t\t\t\t\tdamping: this.#damping.v,\r\n\t\t\t\t\t\tprecision: this.#precision.v\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsettled: true,\r\n\t\t\t\t\tdt: (elapsed * 60) / 1000\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar next = tick_spring(ctx, this.#last_value, this.#current.v, this.#target.v);\r\n\t\t\t\tthis.#last_value = this.#current.v;\r\n\t\t\t\tthis.#last_time = now;\r\n\t\t\t\tset(this.#current, next);\r\n\r\n\t\t\t\tif (ctx.settled) {\r\n\t\t\t\t\tthis.#task = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn !ctx.settled;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this.#task.promise;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `spring.target` to `value` and returns a `Promise` that resolves if and when `spring.current` catches up to it.\r\n\t *\r\n\t * If `options.instant` is `true`, `spring.current` immediately matches `spring.target`.\r\n\t *\r\n\t * If `options.preserveMomentum` is provided, the spring will continue on its current trajectory for\r\n\t * the specified number of milliseconds. This is useful for things like 'fling' gestures.\r\n\t *\r\n\t * @param {T} value\r\n\t * @param {SpringUpdateOpts} [options]\r\n\t */\r\n\tset(value, options) {\r\n\t\tthis.#deferred?.reject(new Error('Aborted'));\r\n\r\n\t\tif (options?.instant || this.#current.v === undefined) {\r\n\t\t\tthis.#task?.abort();\r\n\t\t\tthis.#task = null;\r\n\t\t\tset(this.#current, set(this.#target, value));\r\n\t\t\tthis.#last_value = value;\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\tif (options?.preserveMomentum) {\r\n\t\t\tthis.#inverse_mass = 0;\r\n\t\t\tthis.#momentum = options.preserveMomentum;\r\n\t\t}\r\n\r\n\t\tvar d = (this.#deferred = deferred());\r\n\t\td.promise.catch(noop);\r\n\r\n\t\tthis.#update(value).then(() => {\r\n\t\t\tif (d !== this.#deferred) return;\r\n\t\t\td.resolve(undefined);\r\n\t\t});\r\n\r\n\t\treturn d.promise;\r\n\t}\r\n\r\n\tget current() {\r\n\t\treturn get(this.#current);\r\n\t}\r\n\r\n\tget damping() {\r\n\t\treturn get(this.#damping);\r\n\t}\r\n\r\n\tset damping(v) {\r\n\t\tset(this.#damping, clamp(v, 0, 1));\r\n\t}\r\n\r\n\tget precision() {\r\n\t\treturn get(this.#precision);\r\n\t}\r\n\r\n\tset precision(v) {\r\n\t\tset(this.#precision, v);\r\n\t}\r\n\r\n\tget stiffness() {\r\n\t\treturn get(this.#stiffness);\r\n\t}\r\n\r\n\tset stiffness(v) {\r\n\t\tset(this.#stiffness, clamp(v, 0, 1));\r\n\t}\r\n\r\n\tget target() {\r\n\t\treturn get(this.#target);\r\n\t}\r\n\r\n\tset target(v) {\r\n\t\tthis.set(v);\r\n\t}\r\n}\r\n\r\n/**\r\n * @param {number} n\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(n, min, max) {\r\n\treturn Math.max(min, Math.min(max, n));\r\n}\r\n", "/** @import { Task } from '../internal/client/types' */\r\n/** @import { Tweened } from './public' */\r\n/** @import { TweenedOptions } from './private' */\r\nimport { writable } from '../store/shared/index.js';\r\nimport { raf } from '../internal/client/timing.js';\r\nimport { loop } from '../internal/client/loop.js';\r\nimport { linear } from '../easing/index.js';\r\nimport { is_date } from './utils.js';\r\nimport { set, state } from '../internal/client/reactivity/sources.js';\r\nimport { tag } from '../internal/client/dev/tracing.js';\r\nimport { get, render_effect } from 'svelte/internal/client';\r\nimport { DEV } from 'esm-env';\r\n\r\n/**\r\n * @template T\r\n * @param {T} a\r\n * @param {T} b\r\n * @returns {(t: number) => T}\r\n */\r\nfunction get_interpolator(a, b) {\r\n\tif (a === b || a !== a) return () => a;\r\n\r\n\tconst type = typeof a;\r\n\tif (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) {\r\n\t\tthrow new Error('Cannot interpolate values of different type');\r\n\t}\r\n\r\n\tif (Array.isArray(a)) {\r\n\t\tconst arr = /** @type {Array<any>} */ (b).map((bi, i) => {\r\n\t\t\treturn get_interpolator(/** @type {Array<any>} */ (a)[i], bi);\r\n\t\t});\r\n\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => arr.map((fn) => fn(t));\r\n\t}\r\n\r\n\tif (type === 'object') {\r\n\t\tif (!a || !b) {\r\n\t\t\tthrow new Error('Object cannot be null');\r\n\t\t}\r\n\r\n\t\tif (is_date(a) && is_date(b)) {\r\n\t\t\tconst an = a.getTime();\r\n\t\t\tconst bn = b.getTime();\r\n\t\t\tconst delta = bn - an;\r\n\r\n\t\t\t// @ts-ignore\r\n\t\t\treturn (t) => new Date(an + t * delta);\r\n\t\t}\r\n\r\n\t\tconst keys = Object.keys(b);\r\n\r\n\t\t/** @type {Record<string, (t: number) => T>} */\r\n\t\tconst interpolators = {};\r\n\t\tkeys.forEach((key) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tinterpolators[key] = get_interpolator(a[key], b[key]);\r\n\t\t});\r\n\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => {\r\n\t\t\t/** @type {Record<string, any>} */\r\n\t\t\tconst result = {};\r\n\t\t\tkeys.forEach((key) => {\r\n\t\t\t\tresult[key] = interpolators[key](t);\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t};\r\n\t}\r\n\r\n\tif (type === 'number') {\r\n\t\tconst delta = /** @type {number} */ (b) - /** @type {number} */ (a);\r\n\t\t// @ts-ignore\r\n\t\treturn (t) => a + t * delta;\r\n\t}\r\n\r\n\t// for non-numeric values, snap to the final value immediately\r\n\treturn () => b;\r\n}\r\n\r\n/**\r\n * A tweened store in Svelte is a special type of store that provides smooth transitions between state values over time.\r\n *\r\n * @deprecated Use [`Tween`](https://svelte.dev/docs/svelte/svelte-motion#Tween) instead\r\n * @template T\r\n * @param {T} [value]\r\n * @param {TweenedOptions<T>} [defaults]\r\n * @returns {Tweened<T>}\r\n */\r\nexport function tweened(value, defaults = {}) {\r\n\tconst store = writable(value);\r\n\t/** @type {Task} */\r\n\tlet task;\r\n\tlet target_value = value;\r\n\t/**\r\n\t * @param {T} new_value\r\n\t * @param {TweenedOptions<T>} [opts]\r\n\t */\r\n\tfunction set(new_value, opts) {\r\n\t\ttarget_value = new_value;\r\n\r\n\t\tif (value == null) {\r\n\t\t\tstore.set((value = new_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\t/** @type {Task | null} */\r\n\t\tlet previous_task = task;\r\n\r\n\t\tlet started = false;\r\n\t\tlet {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 400,\r\n\t\t\teasing = linear,\r\n\t\t\tinterpolate = get_interpolator\r\n\t\t} = { ...defaults, ...opts };\r\n\r\n\t\tif (duration === 0) {\r\n\t\t\tif (previous_task) {\r\n\t\t\t\tprevious_task.abort();\r\n\t\t\t\tprevious_task = null;\r\n\t\t\t}\r\n\t\t\tstore.set((value = target_value));\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\tconst start = raf.now() + delay;\r\n\r\n\t\t/** @type {(t: number) => T} */\r\n\t\tlet fn;\r\n\t\ttask = loop((now) => {\r\n\t\t\tif (now < start) return true;\r\n\t\t\tif (!started) {\r\n\t\t\t\tfn = interpolate(/** @type {any} */ (value), new_value);\r\n\t\t\t\tif (typeof duration === 'function')\r\n\t\t\t\t\tduration = duration(/** @type {any} */ (value), new_value);\r\n\t\t\t\tstarted = true;\r\n\t\t\t}\r\n\t\t\tif (previous_task) {\r\n\t\t\t\tprevious_task.abort();\r\n\t\t\t\tprevious_task = null;\r\n\t\t\t}\r\n\t\t\tconst elapsed = now - start;\r\n\t\t\tif (elapsed > /** @type {number} */ (duration)) {\r\n\t\t\t\tstore.set((value = new_value));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// @ts-ignore\r\n\t\t\tstore.set((value = fn(easing(elapsed / duration))));\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\treturn task.promise;\r\n\t}\r\n\treturn {\r\n\t\tset,\r\n\t\tupdate: (fn, opts) =>\r\n\t\t\tset(fn(/** @type {any} */ (target_value), /** @type {any} */ (value)), opts),\r\n\t\tsubscribe: store.subscribe\r\n\t};\r\n}\r\n\r\n/**\r\n * A wrapper for a value that tweens smoothly to its target value. Changes to `tween.target` will cause `tween.current` to\r\n * move towards it over time, taking account of the `delay`, `duration` and `easing` options.\r\n *\r\n * ```svelte\r\n * <script>\r\n * \timport { Tween } from 'svelte/motion';\r\n *\r\n * \tconst tween = new Tween(0);\r\n * </script>\r\n *\r\n * <input type=\"range\" bind:value={tween.target} />\r\n * <input type=\"range\" bind:value={tween.current} disabled />\r\n * ```\r\n * @template T\r\n * @since 5.8.0\r\n */\r\nexport class Tween {\r\n\t#current;\r\n\t#target;\r\n\r\n\t/** @type {TweenedOptions<T>} */\r\n\t#defaults;\r\n\r\n\t/** @type {import('../internal/client/types').Task | null} */\r\n\t#task = null;\r\n\r\n\t/**\r\n\t * @param {T} value\r\n\t * @param {TweenedOptions<T>} options\r\n\t */\r\n\tconstructor(value, options = {}) {\r\n\t\tthis.#current = state(value);\r\n\t\tthis.#target = state(value);\r\n\t\tthis.#defaults = options;\r\n\r\n\t\tif (DEV) {\r\n\t\t\ttag(this.#current, 'Tween.current');\r\n\t\t\ttag(this.#target, 'Tween.target');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a tween whose value is bound to the return value of `fn`. This must be called\r\n\t * inside an effect root (for example, during component initialisation).\r\n\t *\r\n\t * ```svelte\r\n\t * <script>\r\n\t * \timport { Tween } from 'svelte/motion';\r\n\t *\r\n\t * \tlet { number } = $props();\r\n\t *\r\n\t * \tconst tween = Tween.of(() => number);\r\n\t * </script>\r\n\t * ```\r\n\t * @template U\r\n\t * @param {() => U} fn\r\n\t * @param {TweenedOptions<U>} [options]\r\n\t */\r\n\tstatic of(fn, options) {\r\n\t\tconst tween = new Tween(fn(), options);\r\n\r\n\t\trender_effect(() => {\r\n\t\t\ttween.set(fn());\r\n\t\t});\r\n\r\n\t\treturn tween;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `tween.target` to `value` and returns a `Promise` that resolves if and when `tween.current` catches up to it.\r\n\t *\r\n\t * If `options` are provided, they will override the tween's defaults.\r\n\t * @param {T} value\r\n\t * @param {TweenedOptions<T>} [options]\r\n\t * @returns\r\n\t */\r\n\tset(value, options) {\r\n\t\tset(this.#target, value);\r\n\r\n\t\tlet {\r\n\t\t\tdelay = 0,\r\n\t\t\tduration = 400,\r\n\t\t\teasing = linear,\r\n\t\t\tinterpolate = get_interpolator\r\n\t\t} = { ...this.#defaults, ...options };\r\n\r\n\t\tif (duration === 0) {\r\n\t\t\tthis.#task?.abort();\r\n\t\t\tset(this.#current, value);\r\n\t\t\treturn Promise.resolve();\r\n\t\t}\r\n\r\n\t\tconst start = raf.now() + delay;\r\n\r\n\t\t/** @type {(t: number) => T} */\r\n\t\tlet fn;\r\n\t\tlet started = false;\r\n\t\tlet previous_task = this.#task;\r\n\r\n\t\tthis.#task = loop((now) => {\r\n\t\t\tif (now < start) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!started) {\r\n\t\t\t\tstarted = true;\r\n\r\n\t\t\t\tconst prev = this.#current.v;\r\n\r\n\t\t\t\tfn = interpolate(prev, value);\r\n\r\n\t\t\t\tif (typeof duration === 'function') {\r\n\t\t\t\t\tduration = duration(prev, value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevious_task?.abort();\r\n\t\t\t}\r\n\r\n\t\t\tconst elapsed = now - start;\r\n\r\n\t\t\tif (elapsed > /** @type {number} */ (duration)) {\r\n\t\t\t\tset(this.#current, value);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tset(this.#current, fn(easing(elapsed / /** @type {number} */ (duration))));\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn this.#task.promise;\r\n\t}\r\n\r\n\tget current() {\r\n\t\treturn get(this.#current);\r\n\t}\r\n\r\n\tget target() {\r\n\t\treturn get(this.#target);\r\n\t}\r\n\r\n\tset target(v) {\r\n\t\tthis.set(v);\r\n\t}\r\n}\r\n", "import { MediaQuery } from 'svelte/reactivity';\r\n\r\nexport * from './spring.js';\r\nexport * from './tweened.js';\r\n\r\n/**\r\n * A [media query](https://svelte.dev/docs/svelte/svelte-reactivity#MediaQuery) that matches if the user [prefers reduced motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion).\r\n *\r\n * ```svelte\r\n * <script>\r\n * \timport { prefersReducedMotion } from 'svelte/motion';\r\n * \timport { fly } from 'svelte/transition';\r\n *\r\n * \tlet visible = $state(false);\r\n * </script>\r\n *\r\n * <button onclick={() => visible = !visible}>\r\n * \ttoggle\r\n * </button>\r\n *\r\n * {#if visible}\r\n * \t<p transition:fly={{ y: prefersReducedMotion.current ? 0 : 200 }}>\r\n * \t\tflies in, unless the user prefers reduced motion\r\n * \t</p>\r\n * {/if}\r\n * ```\r\n * @type {MediaQuery}\r\n * @since 5.7.0\r\n */\r\nexport const prefersReducedMotion = /*@__PURE__*/ new MediaQuery(\r\n\t'(prefers-reduced-motion: reduce)'\r\n);\r\n"],
  "mappings": "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",
  "names": ["spring", "set", "opts", "set"]
}
