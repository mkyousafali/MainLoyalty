import{w as M}from"./CmJYm0S5.js";import{s as y}from"./CIOq__Tp.js";import{r as D,u as E}from"./480hx4lC.js";class J{activeUploads=M(new Map);completedUploads=M([]);pausedUploads=M(new Map);pollingInterval=null;isPolling=!1;processingJobs=new Map;constructor(){this.loadFromStorage(),console.log("📋 UploadManager initialized (in-memory tracking mode)")}loadFromStorage(){if(typeof window>"u"||typeof localStorage>"u"){console.log("localStorage not available (SSR environment)");return}try{const t=localStorage.getItem("uploadManager_state");if(t){const e=JSON.parse(t);e.completedUploads&&this.completedUploads.set(e.completedUploads)}}catch(t){console.error("Failed to load upload manager state:",t)}}saveToStorage(){if(!(typeof window>"u"||typeof localStorage>"u"))try{this.completedUploads.subscribe(t=>{const e={completedUploads:t.slice(-20)};localStorage.setItem("uploadManager_state",JSON.stringify(e))})()}catch(t){console.error("Failed to save upload manager state:",t)}}async startUpload(t,e){try{const s=crypto.randomUUID(),r=await t.arrayBuffer(),l=D(r,{type:"array"}),a=l.SheetNames[0],g=l.Sheets[a],u=E.sheet_to_json(g).map((n,i)=>{const p=n["Bill No"]||n.bill_no||`AUTO-${Date.now()}-${i}`;let o=n["Bill Date (YYYY-MM-DD)"]||n["Bill Date (YYYY-MM)"]||n["Bill Date"]||n.bill_date;o&&typeof o=="string"&&o.match(/^\d{4}-\d{2}$/)?o=o+"-01":o||(o=new Date().toISOString().split("T")[0]);const d=parseFloat(n["Bill Amount"]||n.bill_amount||"0"),m=n["Customer Mobile"]||n.customer_mobile||n["Mobile Number"]||n.mobile_number||"",_=parseFloat(n["Points to Add"]||n.points_to_add||"0"),$=parseFloat(n["Points to Redeem"]||n.points_to_redeem||"0");return console.log(`Row ${i+1}:`,{billNo:p,billDate:o,billAmount:d,customerMobile:m,pointsToAdd:_,pointsToRedeem:$}),{bill_no:p,mobile_number:m.toString(),amount:d,points_to_add:_,points_to_redeem:$,transaction_date:o,description:`Bill #${p} - Upload`}}).filter(n=>n.mobile_number&&n.mobile_number.trim()!==""&&n.amount>0),S={id:s,user_id:"system_user",branch_id:e,file_name:t.name,status:"pending",total_transactions:u.length,processed_transactions:0,failed_transactions:0,created_at:new Date().toISOString()};console.log("Using in-memory tracking only for upload status (upload_jobs table not available)");const b={jobId:s,fileName:t.name,status:"pending",progress:{total:u.length,processed:0,failed:0}};return this.activeUploads.update(n=>(n.set(s,b),n)),this.processUploadInBackground(s,u,e),console.log(`📊 Upload job ${s} started (in-memory mode)`),s}catch(s){throw console.error("Failed to start upload:",s),s}}async pauseUpload(t){try{return this.processingJobs.set(t,!1),console.log("Upload paused (in-memory tracking only)"),this.activeUploads.update(e=>{const s=e.get(t);return s&&(s.status="paused",s.can_resume=!0),e}),!0}catch(e){return console.error("Failed to pause upload:",e),!1}}async resumeUpload(t){try{let e;if(this.activeUploads.subscribe(r=>{e=r.get(t)})(),!e||e.status!=="paused")return console.error("Job not found or not paused:",t),!1;let s=null;return this.pausedUploads.subscribe(r=>{s=r.get(t)})(),s?(this.processingJobs.set(t,!0),console.log("Resuming upload (in-memory tracking only)"),this.activeUploads.update(r=>{const l=r.get(t);return l&&(l.status="processing",l.can_resume=!1),r}),this.resumeProcessingFromIndex(t,s.transactions,s.branchId,e.progress.processed),!0):(console.error("No paused data found for job:",t),!1)}catch(e){return console.error("Failed to resume upload:",e),!1}}async cancelUpload(t){try{return this.processingJobs.set(t,!1),console.log("Upload cancelled (in-memory tracking only)"),this.activeUploads.update(e=>(e.delete(t),e)),this.pausedUploads.update(e=>(e.delete(t),e)),!0}catch(e){return console.error("Failed to cancel upload:",e),!1}}async processUploadInBackground(t,e,s){try{this.processingJobs.set(t,!0),this.pausedUploads.update(r=>(r.set(t,{transactions:e,branchId:s}),r)),console.log("Processing upload in memory only (upload_jobs table not available)"),this.activeUploads.update(r=>{const l=r.get(t);return l&&(l.status="processing"),r}),await this.processTransactionsFromIndex(t,e,s,0)}catch(r){console.error("Upload processing failed:",r),this.activeUploads.update(l=>{const a=l.get(t);return a&&(a.status="failed",a.error=r instanceof Error?r.message:"Unknown error occurred"),l}),this.processingJobs.set(t,!1)}}async resumeProcessingFromIndex(t,e,s,r){await this.processTransactionsFromIndex(t,e,s,r)}async processTransactionsFromIndex(t,e,s,r){let l=r,a=0;if(r>0){const c=await this.getUploadStatus(t);c&&(a=c.progress.failed)}const g=5;console.log(`🚀 Starting batch processing: ${e.length} total transactions, batch size: ${g}`);for(let c=r;c<e.length;c+=g){if(!this.processingJobs.get(t)){console.log(`⏸️ Upload ${t} paused or cancelled at index ${c}`);return}const S=e.slice(c,Math.min(c+g,e.length)),b=Math.min(c+g,e.length);console.log(`📦 Processing batch ${Math.floor(c/g)+1}: transactions ${c+1}-${b} of ${e.length}`);for(const[n,i]of S.entries()){const p=c+n+1;if(!this.processingJobs.get(t)){console.log(`⏸️ Upload stopped during transaction ${p}`);return}console.log(`📝 Processing transaction ${p}/${e.length}:`),console.log(`   Bill No: ${i.bill_no}`),console.log(`   Amount: ${i.amount}`),console.log(`   Mobile: ${i.mobile_number}`),console.log(`   Points to Add: ${i.points_to_add}`),console.log(`   Points to Redeem: ${i.points_to_redeem}`);try{let o=i.mobile_number.toString().replace(/\D/g,"");if(console.log(`📱 Original mobile: ${i.mobile_number} -> digits only: ${o} (length: ${o.length})`),o.length>10&&(o.startsWith("962")&&o.length===12?(o="0"+o.substring(3),console.log(`🔄 Converted from 962 format: ${o}`)):(o=o.substring(o.length-10),console.log(`✂️ Truncated to last 10 chars: ${o}`))),o.length===9&&(o.startsWith("7")||o.startsWith("5"))&&(o="0"+o,console.log(`➕ Added leading 0: ${o}`)),(o.length!==10||!o.startsWith("0"))&&(o.length<10?(o=("0000000000"+o).slice(-10),console.log(`🔧 Padded short number: ${o}`)):(o="0"+o.substring(1,10),console.log(`🔧 Fixed invalid format: ${o}`))),console.log(`📱 Final normalized mobile: ${o} (length: ${o.length})`),o.length!==10){console.error(`❌ Invalid mobile number format: ${i.mobile_number} -> ${o} (length: ${o.length})`),a++;continue}o.match(/^0[75]\d{8}$/)||console.warn(`⚠️ Warning: Mobile number may not be valid Jordan format: ${o} (should be 07XXXXXXXX or 05XXXXXXXX)`);let d=null;console.log(`🔍 Looking up customer for mobile: ${o}`);const{data:m,error:_}=await y.from("customers").select("id, customer_code, mobile, branch_id").eq("mobile",o).limit(1);if(_){console.error("❌ Customer lookup error:",_),console.error("📊 Query details - Table: customers, Mobile:",o),a++;continue}if(m&&m.length>0)d=m[0],console.log(`✅ Found existing customer: ${d.id} for mobile: ${o}`);else{console.log(`➕ Creating new customer for mobile: ${o}, branch: ${s}`);const{data:P}=await y.from("card_types").select("id").eq("name","bronze").single(),T={customer_code:o,mobile:o,branch_id:s,card_type_id:P?.id,status:"active",card_status:"unregistered",points:0,total_points:0,created_at:new Date().toISOString()};console.log("📝 Customer data to insert:",T);const{data:x,error:f}=await y.from("customers").insert([T]).select("id, customer_code, mobile, branch_id").single();if(f){console.error("❌ Failed to create customer:",f),console.error("💾 Data attempted:",T),console.error("🔧 Error details:",{code:f.code,message:f.message,details:f.details,hint:f.hint}),a++;continue}d=x,console.log(`✅ Created new customer: ${d.id} for mobile: ${o}`)}const $=i.points_to_add||i.amount||0,F=i.points_to_redeem||0,U=parseFloat($.toString())||0,v=parseFloat(F.toString())||0;console.log(`🔢 Points conversion: ${$} → ${U} earned, ${F} → ${v} redeemed`);const w={bill_no:i.bill_no,bill_date:i.transaction_date,bill_amount:i.amount,customer_id:d.id,customer_mobile:o,branch_id:s,transaction_type:"upload",amount:i.amount,points_earned:U,points_redeemed:v,add_amt:U,redeem:v,notes:i.description||`Bill #${i.bill_no} - Excel Upload`,transaction_date:new Date().toISOString(),status:"completed",created_at:new Date().toISOString(),updated_at:new Date().toISOString()};console.log("💳 Creating transaction:",w);const{error:h}=await y.from("customer_transactions").insert([w]);h?(console.error("❌ Failed to create transaction:",h),console.error("💾 Transaction data attempted:",w),console.error("🔧 Transaction error details:",{code:h.code,message:h.message,details:h.details,hint:h.hint}),a++):(l++,console.log(`✅ Transaction created successfully for customer ${d.id}`))}catch(o){console.error(`❌ Error processing transaction ${p}:`,o),a++}this.activeUploads.update(o=>{const d=o.get(t);return d&&(d.progress={total:e.length,processed:l,failed:a},console.log(`📊 Progress update: ${l}/${e.length} processed, ${a} failed`)),o})}console.log(`✅ Batch ${Math.floor(c/g)+1} completed. Progress: ${l}/${e.length} (${Math.round(l/e.length*100)}%)`),await new Promise(n=>setTimeout(n,100))}if(this.processingJobs.get(t)){const c=a===0?"completed":l===0?"failed":"completed";console.log(`🏁 Upload ${c} in memory only (upload_jobs table not available)`),console.log(`📊 Final statistics: ${l} processed, ${a} failed, ${e.length} total`),console.log(`✅ Success rate: ${Math.round(l/e.length*100)}%`),this.activeUploads.update(u=>(u.delete(t),u)),this.completedUploads.update(u=>{const b=[{id:t,fileName:"Excel Upload",status:c,progress:{total:e.length,processed:l,failed:a},created_at:new Date().toISOString(),completed_at:new Date().toISOString(),error_msg:a>0?`${a} transactions failed to process`:void 0},...u.slice(0,19)];return this.saveToStorage(),b}),console.log(`📈 Upload completed: ${l} processed, ${a} failed`)}else console.log("⏸️ Upload processing was stopped before completion")}startPolling(){console.log("🚫 Upload polling skipped (using in-memory tracking only)")}stopPolling(){this.pollingInterval&&(clearInterval(this.pollingInterval),this.pollingInterval=null),this.isPolling=!1}async pollUploadStatus(){}async getUploadStatus(t){let e=null;return this.activeUploads.subscribe(s=>{const r=s.get(t);r&&(e={id:r.jobId,fileName:r.fileName,status:r.status,progress:r.progress,created_at:new Date().toISOString()})})(),e}async getRecentUploads(t=10){try{let e=[];return this.completedUploads.subscribe(s=>{e=s.slice(0,t)})(),e}catch(e){return console.error("Failed to get recent uploads from storage:",e),[]}}getStatusIcon(t){switch(t){case"completed":return"✅";case"failed":return"❌";case"processing":return"🔄";case"pending":return"⏳";case"paused":return"⏸️";case"cancelled":return"🚫";default:return"📄"}}getStatusColor(t){switch(t){case"completed":return"text-green-600";case"failed":return"text-red-600";case"processing":return"text-blue-600";case"pending":return"text-yellow-600";case"paused":return"text-orange-600";case"cancelled":return"text-gray-600";default:return"text-gray-600"}}getProgressPercentage(t){return t.progress.total===0?0:Math.round(t.progress.processed/t.progress.total*100)}testMobileNormalization(t){let e=t.toString().replace(/\D/g,"");return console.log(`TEST: Original mobile: ${t} -> digits only: ${e} (length: ${e.length})`),e.length>10&&(e.startsWith("962")&&e.length===12?(e="0"+e.substring(3),console.log(`TEST: Converted from 962 format: ${e}`)):(e=e.substring(e.length-10),console.log(`TEST: Truncated to last 10 chars: ${e}`))),e.length===9&&(e.startsWith("7")||e.startsWith("5"))&&(e="0"+e,console.log(`TEST: Added leading 0: ${e}`)),(e.length!==10||!e.startsWith("0"))&&(e.length<10?(e=("0000000000"+e).slice(-10),console.log(`TEST: Padded short number: ${e}`)):(e="0"+e.substring(1,10),console.log(`TEST: Fixed invalid format: ${e}`))),console.log(`TEST: Final result: ${e} (length: ${e.length})`),e}get activeUploadsStore(){return this.activeUploads}get completedUploadsStore(){return this.completedUploads}destroy(){this.stopPolling()}}const k=new J;typeof window<"u"&&window.addEventListener("beforeunload",()=>{k.destroy()});export{k as u};
